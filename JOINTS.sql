CREATE DATABASE FOOD;
USE FOOD;

SELECT * FROM FOODSALES;
SELECT * FROM SALESDATA;

-- INNER JOIN
SELECT FOODSALES.ID,SALESDATA.SALESTEAM FROM FOODSALES
INNER JOIN SALESDATA ON FOODSALES.ID=SALESDATA.ID;

-- QUERY TO GET COMMONDATA PRESENT B/W 2 TABLES FOR CITY TO GET SALESAMOUNT AND SALESAMOUNT SHOULD GREATER THAN 2000
SELECT FOODSALES.CITY,SALESDATA.SALESAMOUNT FROM FOODSALES 
INNER JOIN SALESDATA ON FOODSALES.ID=SALESDATA.ID
WHERE SALESDATA.SALESAMOUNT>2000;


-- LEFT JOIN
-- QUERY TO GET SALES TEAM PRESENT FOR THIS CITY EXCEPT BOSTON CITY
SELECT FT.CITY,SALESTEAM FROM FOODSALES FT
LEFT JOIN SALESDATA ST ON FT.ID=ST.ID
WHERE CITY<> "BOSTON"
ORDER BY SALESTEAM DESC;



-- RIGHT JOIN
-- QUERY TO GET QTY OF PRODUCT IS SOLD
SELECT ST.PRODUCT,FT.QTY FROM FOODSALES FT
RIGHT JOIN SALESDATA ST ON FT.ID= ST.ID;
 

-- UNION
USE FOOD;
SELECT * FROM UNIONDATA;
SELECT * FROM FOODSALES UNION SELECT * FROM UNIONDATA;

-- QUERY TO APPEND FOODSALES AND UNIONDATA WHERE IN THE FOOD SALES QTY SHULD BE GREATER THAN 100 AND UNIONDATA WILL BE LESS THAN 100
SELECT * FROM UNIONDATA
WHERE QTY > '100' UNION
SELECT * FROM FOODSALES 
WHERE QTY < '100';


-- QUERY  TO UNION ALL BETWEEN FOODSALES AND UNIONDATA
SELECT * FROM FOODSALES
UNION ALL 
SELECT * FROM UNIONDATA;

-- QUERY FOR FULL OUTER JOIN IN FOODSALES AND UNIONDATA    --- ((most cases it will not work))
SELECT * FROM FOODSALES
LEFT JOIN SALESDATA ON FOODSALES.ID = SALESDATA.ID
UNION ALL
SELECT * FROM FOODSALES
RIGHT JOIN SALESDATA ON FOODSALES.ID = SALESDATA.ID;

-- (CASES) 
-- QUERY IN FOOD SALES TABLE IF QTY <70 IS GOOD QTY , >70 IS BAD QTY
USE FOOD;
SELECT * FROM FOODSALES;
SELECT QTY, 
CASE
WHEN QTY < 70 THEN "GOOD QTY"
ELSE "BAD QTY" 
END AS QTY_STATUS FROM FOODSALES; 


-- QUERY TO FIVE ABOVE 80 IS GOOD QTY , BELOW 
SELECT QTY,
CASE
WHEN QTY > 80 THEN "GOOD QTY"
WHEN QTY < 40 THEN "BAD QTY" 
ELSE "AVG QTY"
END AS QTY_STATUS FROM FOODSALES;


-- QUERY  REGION IS EAST AND CITY SHULD BE BOSTON THEN SHULD DISPLAY EB THEN U NEED TO DISPLAY OTHERS
SELECT REGION,CITY,
CASE
WHEN REGION = "EAST" AND CITY = "BOSTON" THEN "EB"
ELSE "OTHERS"
END AS QTY_STATUS FROM FOODSALES;

-- (FUNCTIONS)
-- QUERY TO COMBINE CITY AND CATEGORY
 SELECT CONCAT(REGION," ",CITY) AS CITY_CAT_NAME FROM FOODSALES;
-- QUERY TO GET CITY NAME IN UPPER CASE
SELECT UPPER(CITY) AS UPPERCASE FROM FOODSALES;


-- QUERY TO COMBINE REGION,AND CATEGORY AND COMBINE COLUMN SHULD CONVERT INTO UPPERCASE
SELECT REGION,CATEGORY,UCASE(CONCAT(REGION," ",CATEGORY)) AS UP_CATEGORY FROM FOODSALES;


-- QUERY TO GET LENGTH OF CITIES
SELECT * FROM FOODSALES;
SELECT LENGTH(CITY) FROM FOODSALES;


-- QUERY TO DISPLAY THE ENTIRE DATA WHERE CITY LENGHT >= 8
SELECT * FROM FOODSALES 
WHERE LENGTH(CITY>="8");


-- QUERY TO GET ALL THE DATA WHERE CITY CONTAINS O AND LENTH OF CITY SHULD BE > 8
SELECT * FROM FOODSALES
WHERE CITY LIKE "%O%" AND LENGTH(CITY > "8");


-- QUERY TO EXTRACT 3 CHARCATERS FROM CATEGORY
SELECT CATEGORY,LEFT (CATEGORY,3) FROM FOODSALES;


-- QUERY TO GET LAST 4 CHARACTERS FROM CITY
SELECT CITY,RIGHT (CITY,4)FROM FOODSALES;


-- QUERY TO GET 2 3RD CHARACTERS IN REGION
SELECT REGION,MID(REGION,2,2) FROM FOODSALES;


-- QUERY TO REPLACE EAT WITH NORTH IN FOODSALES
SELECT REGION,REPLACE (REGION,"EAST","NORTH")FROM FOODSALES;


-- QUERY TO GET ALL THE DATA WHERE O REPLACING A IN CITY
SELECT CITY,REPLACE (CITY,"o","a")FROM FOODSALES;


-- CEIL()
-- QUERY TO GET A UNIT PRICE OF NEAREST LARGE NUMBER
SELECT UNITPRICE,CEIL(UNITPRICE),FLOOR(UNITPRICE) FROM FOODSALES; 


-- QUERY ROUNDOFF THE UNIT PRICE ONLY FOR SINGLE DECIMAL
SELECT UNITPRICE,ROUND(UNITPRICE) FROM FOODSALES;


-- QUERY TO GET ALL THE DATA ONLY FOR EVEN IDS
SELECT * FROM FOODSALES
WHERE MOD (ID,2)=0;


-- QUERY TO GET DISPLAY THE ODD IDS
SELECT * FROM FOODSALES
WHERE MOD (ID,2)!=0;


-- QUERY TO GET SQRE ROOT
SELECT SQRT(4);  -- FOR ROUNDUP
SELECT ROUND(SQRT(10),2);



-- QUERY FOR POWER
SELECT POWER(2,3);      -- WHERE 2X2X2



-- QUERY FOR ABSOLUTE
SELECT ABS(-1);


-- DATE FUNCTIONS
USE SALESDB; 
SELECT *,CURRENT_DATE(),CURRENT_TIME(),NOW() FROM SALESDATA;
SELECT *,CURRENT_DATE(),CURRENT_TIME(),TIME(NOW()) FROM SALESDATA;
SELECT *,CURRENT_DATE(),CURRENT_TIME(),DATE(NOW()) FROM SALESDATA;


-- QUERY TO GET ALL THE DATA OF FIRST DAY OF EVERY MONTH DATA
SELECT * FROM SALESDATA
WHERE DAY(DATE)=1;


-- QUERY TO DISPLAY LAST DAY OF MONTH DATA
SELECT * FROM SALESDATA
WHERE DAY(DATE)=(28 OR 30 OR 31);


-- QUERY TO GET ONLY JAN MONTH DATA
SELECT * FROM SALESDATA
WHERE MONTH(DATE)=1;


-- QUERY TO GET ONLY 2023 JAN MONTH DATA
SELECT * FROM SALESDATA
WHERE MONTH(DATE)=1 AND YEAR(DATE)=2022;


-- QUERY TO GET DAY NAMES
SELECT DATE,DAYNAME(DATE) FROM SALESDATA;


-- QUERY TO GET ONLY MONDAYS DATA FROM 2023
SELECT * FROM SALESDATA
WHERE DAYNAME(DATE)= 'MONDAY' AND YEAR (DATE)='2023';


-- QUERY TO GET A DIFFERENCE OF DAYS PRESENT BETWEEN THIS DATE TO PRESENT DATE
SELECT DATE,DATEDIFF(CURRENT_DATE(),DATE) AS DIFFERNCE_DATE FROM SALESDATA;


-- QUERY TO KNOW WHICH WEEK WE ARE
SELECT WEEKOFYEAR("2023-12-12") AS CUURENT_WEEK FROM SALESDATA;


-- QUERY TO GET ALL THE DATA FOR  YEAR 2022 AND FOR WEEK 30 WEEK
SELECT * FROM SALESDATA
WHERE WEEKOFYEAR(DATE)=30 AND YEAR(DATE)=2022;

SELECT WEEKDAY("2023-12-12");

-- QUERY TO GET ALL THE SUNDAYS DATA
SELECT * FROM SALESDATA
WHERE WEEKDAY(DATE)=6;


-- QUERY TO ADD 10 DAYS FOR DATE
SELECT DATE, ADDDATE(DATE,INTERVAL(10)DAY)  AS ADDDAY FROM SALESDATA;


-- QUERY TO ADD 10 DAYS 10 MONTH AND 10 YEAR
SELECT DATE, ADDDATE(DATE,INTERVAL(10)DAY)  AS ADDDAY ,
ADDDATE(DATE,INTERVAL 10 MONTH) AS ADDMONTH,
ADDDATE(DATE,INTERVAL 10 YEAR) AS ADDYEAR FROM SALESDATA;



-- WINDOWS FUNCTIONS / ANALYTICAL FUNCTIONS
-- TO FIND RANK NUMBER, DENSE NUMBER AND RANK 
SELECT REGION,QTY,ROW_NUMBER() OVER (ORDER BY QTY DESC) AS R_NUMBER,
RANK() OVER (ORDER BY QTY DESC) AS RANKNUMBER,
DENSE_RANK() OVER (ORDER BY QTY DESC) AS DENSERANKNUMBER FROM SALESDATA;


-- TO GET 30TH RANK
SELECT * FROM 
(SELECT REGION,QTY,DENSE_RANK() OVER (ORDER BY QTY DESC) AS DENSENUMBER FROM SALESDATA)TEMP
WHERE DENSENUMBER='30';



-- QUERY TO GET 51TH HIGHEST QTY
SELECT * FROM
(SELECT REGION,QTY,DENSE_RANK() OVER (ORDER BY QTY DESC)AS DENSENUMBER FROM SALESDATA)TEMP
WHERE DENSENUMBER = '51';


-- USING PARTITION BY
-- QUERY TO GET 2ND HIGHEST SALARY FOR B 
SELECT * FROM SALESDATA;
SELECT * FROM
(SELECT REGION,QTY,CITY,DENSE_RANK() OVER (PARTITION BY CITY ORDER BY QTY DESC)AS DENSENUMBER FROM SALESDATA)TEMP
WHERE DENSENUMBER = '51';


-- QUERY TO GET 10TH HIGEST QTY PRESENT IN NEW YORK
SELECT * FROM
(SELECT REGION,QTY,CITY,DENSE_RANK() OVER (PARTITION BY CITY ORDER BY QTY DESC)AS DENSENUMBER FROM SALESDATA)TEMP
WHERE CITY = "NEW YORK" AND DENSENUMBER = 10;



-- VIEWS 
-- SYNTAX:- CREATE VIEW VIEWNAME ();
-- QUERY TO GET ALL BOSTON DATA FOR VIEW PURPOSE
CREATE VIEW BOSTONDATA AS
SELECT * FROM SALESDATA
WHERE CITY = "BOSTON";
SELECT * FROM BOSTONDATA;



-- CREATE A VIEW  TO GET ID,CITY,QTY,UNITPRICE FOR NEW YORK THEN QTY SHULD GREATER THAN 100 AND SORT UR DATA INTO DESC TO ASC
CREATE VIEW NEWYORKDATA AS
SELECT ID,CITY,QTY,UNITPRICE FROM SALESDATA
WHERE CITY = "NEW YORK"
ORDER BY QTY;
SELECT * FROM NEWYORKDATA;

CREATE OR REPLACE VIEW NEWYORKDATA AS
SELECT ID,CITY,QTY,UNITPRICE FROM SALESDATA
WHERE CITY = "NEW YORK" AND QTY>100
ORDER BY QTY;
SELECT * FROM NEWYORKDATA;


SELECT * FROM NEWYORKDATA VIEW
WHERE QTY>200;



-- FUNCTIONS
-- STORE PROCEDURES
-- CREATE A STORE PROCEDURE TO GET A ALL DATA OF EAST IN THE CITY OF BOSTON AND NEW YORK
DELIMITER $$
CREATE PROCEDURE EASTDATA()
BEGIN
SELECT * FROM SALESDATA
WHERE REGION="EAST" AND CITY IN("BOSTON","NEW YORK");
END $$
DELIMITER ;
CALL EASTDATA();



-- STORED PROCEDURE WITH PARAMETER
DELIMITER ##
CREATE PROCEDURE CITYDATA(CITYNAME VARCHAR(20))
BEGIN
SELECT * FROM SALESDATA
WHERE CITY = CITYNAME;
END ##
DELIMITER ;
CALL CITYDATA("BOSTON");
CALL CITYDATA("NEW YORK");



-- TCL COMMANDS
START TRANSACTION;

SAVEPOINT EASTDATA;
DELETE FROM SALESDATA
WHERE REGION = "EAST";
COMMIT;
ROLLBACK TO EASTDATA;
SELECT * FROM SALESDATA;


-- CREATING ANOTHER USER 


CREATE USER JOHN@LOCALHOST IDENTIFIED BY "John123";
GRANT SELECT,DELETE  ON SALESDB.SALESDATA TO JOHN@LOCALHOST;


-- REVOKE PERMISSION FROM USER
REVOKE DELETE ON SALESDB.SALESDATA FROM JOHN@LOCALHOST;

USE FOOD;
SELECT * FROM FOODSALES;


-- QUERY TO GET DETAILS OF MAXIMUM QTY
SELECT * FROM FOODSALES
WHERE QTY = (SELECT MAX(QTY)FROM FOODSALES);


-- QUERY TO GET DETAILS OF DATA WHERE QTY SHULD BE GREATER THAN AVERAGE QTY
SELECT * FROM FOODSALES
WHERE QTY>(SELECT AVG(QTY) FROM FOODSALES);


-- QUERY TO GET ALL DETAILS OF QTY SHULD BE  GREATER THAN 50
SELECT * FROM FOODSALES
WHERE ID IN (SELECT ID FROM FOODSALES WHERE QTY>50);

-- QUERY TO GET A DATA OF ENTIRE DETAILS OF FOODSALES WHERE FOR MIN SALES AMNT
SELECT * FROM FOODSALES;
SELECT * FROM SALESDATA;

SELECT * FROM FOODSALES
WHERE ID IN (SELECT ID FROM SALESDATA WHERE SALESAMOUNT=500 );


-- QUERY TO GET COMMON DATA PRESENT BETWEEN FOODSALES AND SALESDATA
SELECT * FROM FOODSALES
WHERE ID IN (SELECT ID FROM SALESDATA);




-- CTE QUERIES UNDER DATABASE FOOD
WITH DATAINFO AS(
SELECT * FROM FOODSALES
WHERE CITY = "BOSTON"
)
SELECT CITY,QTY FROM DATAINFO;




-- CREATING DUPLICATE TABLE 
CREATE TABLE FOODBACKUP AS SELECT * FROM FOODSALES;







